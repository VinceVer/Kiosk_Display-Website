doctype html
html(lang='en')
  head
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link#themeLink(rel='stylesheet' href=`/stylesheets/theme-${layout.theme}.css`)
    link(rel='stylesheet' href='/stylesheets/desktop-layout.css')
    link(rel='stylesheet' href='/stylesheets/desktop.css')
  body.fade
    #brightnessFilter(style=`background-color: rgba(10, 10, 10, ${1 - layout.background_opacity / 100})`)

    nav
      button.HOME(onclick="location.href = '/desktop'") RETURN TO DISPLAY
      a.navLink(href="/desktop/layout") Change Layout
      .dropdown.navLink(style="padding-bottom: 0;") Data Analytics
        .content(style="margin-top: 7px;")
          div
            a.navLink.item(href="/desktop/data/gradient") Gradient Visualizer
          div
            a.navLink.item(href="/desktop/data/reports") Report Generator
      a.navLink(href="/desktop/data/timeline") Timeline
      //a.navLink(href="/desktop/data") Data Analytics
      //a.navLink(href="/desktop/") Link 2
      //a.navLink(href="/desktop/") Link 3
      //form#login(onsubmit="testPassword(this.parentNode.querySelector('input').value, event)")
        input(type="password" placeholder=" Log in by entering the site key" required)
        input#loginButton(type="submit" value="\u23CE")
      //button#logout(onclick="testPassword('LOGOUT')") Click here to logout

    #display(style="visibility: hidden")
      .bar
        h1
      #container
      #overlay.clickToClose
        #devices.data
          h2 Connected Devices
        .info.clickToClose
          .banner
            h1
          .map
        #applications.data
          h2 Applications
      #footer

    #settingsInput.cardView
      .flexBar(style="background-color: var(--fade180); padding-bottom: 10px")
        form(onsubmit="uploadLayoutData(event, this, getAlertInfo() );")
          button.gridTile(style="padding: 0" type="button" onclick="this.querySelector('input').click()")
            .background_input
              .flexBar
                h3 Background:
              .flexBar
                input(type="file" accept="image/*" name="background" id="background_file_box" onclick="event.stopPropagation()")
          button.gridTile.checkbox(type="button")
            .flexBar
              h3 Show location labels:
            .flexBar
              input(type="checkbox" name="label_locations" checked=(layout.label_locations === "true" ? true : false) onclick="event.stopPropagation();")
          button.gridTile(type="button")
            .flexBar
              h3 Toggle identifier tags:
            .flexBar.filterOptions(style="gap: 5%;")
              #tag_urgency4.filter(data-urgency_level="4" class=(layout.urgency4_tag === "1" ? "selected" : null))
              #tag_urgency3.filter(data-urgency_level="3" class=(layout.urgency3_tag === "1" ? "selected" : null))
              #tag_urgency1.filter(data-urgency_level="1" class=(layout.urgency1_tag === "1" ? "selected" : null))
              #tag_urgency2.filter(data-urgency_level="2" class=(layout.urgency2_tag === "1" ? "selected" : null))
              #tag_urgency0.filter(data-urgency_level="0" class=(layout.urgency0_tag === "1" ? "selected" : null))
              #tag_urgency-1.filter(data-urgency_level="-1" class=(layout.urgency_1_tag === "1" ? "selected" : null))
          button.gridTile(type="button")
            .flexBar
              h3 Size of the kiosk tiles:
            .flexBar
              input(type="range" name="tile_size" min="1" value=layout.tile_size)
          button.gridTile(type="button")
            .flexBar
              h3 Display theme picker:
            .flexBar
              select(name="theme")
                option(value="dark" selected=(layout.theme === "dark" ? true : false)) Dark
                option(value="light" selected=(layout.theme === "light" ? true : false)) Light
                option(value="banana" selected=(layout.theme === "banana" ? true : false)) Banana
                option(value="smurf" selected=(layout.theme === "smurf" ? true : false)) Smurf
                option(value="watermelon" selected=(layout.theme === "watermelon" ? true : false)) Watermelon
          br
          button.gridTile(type="button")
            .flexBar
              h3 Background opacity:
            .flexBar
              input(type="range" name="background_opacity" min="0" max="100" step="1" value=layout.background_opacity)
          button.gridTile.checkbox(type="button")
            .flexBar
              h3 Align location labels:
            .flexBar
              input(type="checkbox" name="align_labels" checked=(layout.align_labels === "true" ? true : false) onclick="event.stopPropagation()")
          button.gridTile(type="button")
            .flexBar
              h3 Size of identifier tags:
            .flexBar
              input(type="range" name="tag_size" min="1" value=layout.tag_size)
          button.gridTile.checkbox(type="button")
            .flexBar
              h3 Enable tile animations:
            .flexBar
              input(type="checkbox" name="tile_animations" checked=(layout.tile_animations === "true" ? true : false) onclick="event.stopPropagation()")
          button#progressButton.gridTile(style="display: block; margin-bottom: 0; text-align: center; width: calc(100% + 40px)")
            input(type="submit")
            .progressBar

    #alertBox
      h2
      h4
      .flexBar
      .blockActions

    #templates(style="display: none")
      #segment.segment
        .flexBar
          h3
          h4 test
        .content
          div
        h5 Last seen: 

    #data_storage(data-config_data=config_data data-status_database=status_database style="display: none")

    style.
      :root {
        --tag-size: #{layout.tag_size / 20 + "rem"};
        --tile-size: #{layout.tile_size / 20 + "rem"};
        --label-locations: #{layout.label_locations === "true" ? "inline-block" : "none"};
      }

      body {
        background-image: url(#{"/images/"+layout.background_file});
      }

      .kiosk.urgency_-1 {--identifier-opacity: #{layout.urgency_1_tag || 0};}
      .kiosk.urgency_0 {--identifier-opacity: #{layout.urgency0_tag || 0};}
      .kiosk.urgency_1 {--identifier-opacity: #{layout.urgency1_tag || 0};}
      .kiosk.urgency_2 {--identifier-opacity: #{layout.urgency2_tag || 0};}
      .kiosk.urgency_3 {--identifier-opacity: #{layout.urgency3_tag || 0};}
      .kiosk.urgency_4 {--identifier-opacity: #{layout.urgency4_tag || 0};}
      .kiosk.urgency_5 {--identifier-opacity: 1;}
      .kiosk.urgency_12 {--identifier-opacity: max(#{layout.urgency1_tag || 0}, #{layout.urgency2_tag || 0});}
      .kiosk.urgency_42 {--identifier-opacity: max(#{layout.urgency4_tag || 0}, #{layout.urgency2_tag || 0});}

    script(src='/javascripts/general-functions.js')
    script(src='/javascripts/desktop-home.js')
    script(src='/javascripts/desktop-layout.js')
    script.
      const getAlertInfo = () => {
        return { title: "Success", description: `The layout has successfully been updated.`, buttons: [{text: "OK", action: () => {location.href = "/desktop"}}] }
      }